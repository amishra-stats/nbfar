% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nbfar.R
\name{nbfar}
\alias{nbfar}
\title{Negative binomial co-sparse factor regression  (NBFAR)}
\usage{
nbfar(
  Yt,
  X,
  maxrank = 3,
  nlambda = 40,
  cIndex = NULL,
  ofset = "CSS",
  control = list(),
  nfold = 5,
  PATH = FALSE,
  nthread = 1,
  trace = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{Yt}{response matrix}

\item{X}{design matrix; when X = NULL, we set X as identity matrix and perform generalized sparse PCA.}

\item{maxrank}{an integer specifying the maximum possible rank of the coefficient matrix or the number of factors}

\item{nlambda}{number of lambda values to be used along each path}

\item{cIndex}{specify index of control variables in the design matrix X}

\item{ofset}{offset matrix or microbiome data analysis specific scaling: common sum scaling = CSS (default), total sum scaling = TSS, median-ratio scaling = MRS, centered-log-ratio scaling  = CLR}

\item{control}{a list of internal parameters controlling the model fitting}

\item{nfold}{number of folds in k-fold crossvalidation}

\item{PATH}{TRUE/FALSE for generating solution path of sequential estimate after cross-validation step}

\item{nthread}{number of thread to be used for parallelizing the crossvalidation procedure}

\item{trace}{TRUE/FALSE checking progress of cross validation error}

\item{verbose}{TRUE/FALSE checking progress of estimation procedure}
}
\value{
\item{C}{estimated coefficient matrix; based on GIC}
\item{Z}{estimated control variable coefficient matrix}
\item{Phi}{estimted dispersion parameters}
\item{U}{estimated U matrix (generalize latent factor weights)}
\item{D}{estimated singular values}
\item{V}{estimated V matrix (factor loadings)}
}
\description{
To estimate a low-rank and sparse coefficient matrix in large/high dimensional setting, the approach extracts unit-rank components of required matrix in sequential order. The algorithm automatically stops after extracting sufficient unit rank components.
}
\examples{
\donttest{
## Load simulated data set:
data('simulate_nbfar')
attach(simulate_nbfar)

# Model with known offset
set.seed(1234)
offset <- log(10)*matrix(1,n,ncol(Y))
control_nbfar <- nbfar_control(initmaxit = 5000, gamma0 = 2, spU = 0.5,
spV = 0.6, lamMinFac = 1e-10, epsilon = 1e-5)
# nbfar_test <- nbfar(Y, X, maxrank = 5, nlambda = 20, cIndex = NULL,
# ofset = offset, control = control_nbfar, nfold = 5, PATH = F)
}
}
\references{
Mishra, A., MÃ¼ller, C. (2022) \emph{Negative binomial factor regression models with application to microbiome data analysis.  https://doi.org/10.1101/2021.11.29.470304}
}
